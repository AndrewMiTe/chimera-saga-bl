/*
 * MIT License
 *
 * Copyright (c) 2016 Andrew Michael Teller(https://github.com/AndrewMiTe)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package battle;

import java.time.Duration;

/**
 * Constructs {@link Status} objects using a builder pattern. All setter methods
 * return the instance of the object it is called upon. The build method returns
 * a new Status object using the information obtained through setters.
 * @author Andrew M. Teller(https://github.com/AndrewMiTe)
 */
public class StatusBuilder {

  /**
   * Stores the name value for producing a Status object.
   * @see battle.Status Status.name
   */
  private String name;
  /**
   * Stores the description value for producing a Status object.
   * @see battle.Status Status.description
   */
  private String description;
  /**
   * Stores the duration value for producing a Status object.
   * @see battle.Status Status.duration
   */
  private Duration duration;
  /**
   * Stores the stacks value for producing a Status object.
   * @see battle.Status Status.stacks
   */
  private int stacks;
  /**
   * Stores the stuns value for producing a Status object.
   * @see battle.Status Status.stuns
   */
  private boolean stuns;
  /**
   * Stores the defeats value for producing a Status object.
   * @see battle.Status Status.defeats
   */
  private boolean defeats;
  /**
   * Stores the hidden value for producing a Status object.
   * @see battle.Status Status.hidden
   */
  private boolean hidden;

  /**
   * Basic constructor.
   */
  public StatusBuilder() {
    this.name = null;
    this.description = "";
    this.duration = Duration.ZERO;
    this.stacks = 1;
    this.stuns = false;
    this.defeats = false;
    this.hidden = false;
  }

  public Status build() {
    return new Status(name, description, duration, stacks, stuns, defeats,
        hidden);
  }

  /**
   * @param name name value for producing a Status object.
   * @return this StatusBuilder object.
   * @see battle.Status Status.name
   */
  public StatusBuilder setName(String name) {
    this.name = name;
    return this;
  }

  /**
   * @param description name value for producing a Status object.
   * @return this StatusBuilder object.
   * @see battle.Status Status.description
   */
  public StatusBuilder setDescription(String description) {
    if (description == null) {
      throw new IllegalArgumentException("description cannot be null");
    }
    this.description = description;
    return this;
  }

    /**
   * @param duration name value for producing a Status object.
   * @return this StatusBuilder object.
   * @see battle.Status Status.duration
   */
  public StatusBuilder setDuration(Duration duration) {
    if (duration == null) {
      throw new IllegalArgumentException("duration cannot be null");
    }
    this.duration = duration;
    return this;
  }

  /**
   * @param stacks name value for producing a Status object.
   * @return this StatusBuilder object.
   * @see battle.Status Status.stacks
   */
  public StatusBuilder setStacks(int stacks) {
    if (stacks < 1) {
      throw new IllegalArgumentException("stacks cannot be less then 1");
    }
    this.stacks = stacks;
    return this;
  }

  /**
   * @param stuns name value for producing a Status object.
   * @return this StatusBuilder object.
   * @see battle.Status Status.stuns
   */
  public StatusBuilder setStuns(boolean stuns) {
    this.stuns = stuns;
    return this;
  }

  /**
   * @param defeats name value for producing a Status object.
   * @return this StatusBuilder object.
   * @see battle.Status Status.defeats
   */
  public StatusBuilder setDefeats(boolean defeats) {
    this.defeats = defeats;
    return this;
  }

  /**
   * @param hidden name value for producing a Status object.
   * @return this StatusBuilder object.
   * @see battle.Status Status.hidden
   */
  public StatusBuilder setHidden(boolean hidden) {
    this.hidden = hidden;
    return this;
  }
  
}
